# -*- coding: utf-8 -*-
"""PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gi-1P7KLpPtxfGVNscbIysc-di7CJJx_
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
sns.set(style = 'darkgrid')
import numpy as np
import plotly.express as px
import warnings
warnings.filterwarnings('ignore')
import sklearn
from matplotlib.ticker import StrMethodFormatter
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

data = pd.read_csv('/content/drive/MyDrive/Sleep_Analysis.csv')

data.head()

data.describe()

data.shape

data.info()

data.isnull().sum()

#duplicate rows
dp = pd.DataFrame(data)
duplicates = dp[dp.duplicated()]
print(duplicates)
data.duplicated().any()

data = data.drop(["meals/day","sleep direction","beverage","screen time" ],axis=1)
data.head()

# Replacing YES or NO with 0 and 1 in data
data.replace(('yes','no','sometimes'),(1,0,1), inplace=True)
data.head()

data.replace(('Male','Female'),(0,1), inplace=True)
data.head()

# Handle outliers, if they exist
def outlier(dataframe, a,b,c,d):
    plt.figure(figsize = (12, 3))
    plt.subplot(1,4,1)
    sns.boxplot(x = dataframe[a])
    plt.title(f"{a} boxplot")

    plt.subplot(1,4,2)
    sns.boxplot(x = dataframe[b])
    plt.title(f"{b} boxplot")

    plt.subplot(1,4,3)
    sns.boxplot(x = dataframe[c])
    plt.title(f"{c} boxplot")

    plt.subplot(1,4,4)
    sns.boxplot(x = dataframe[d])
    plt.title(f"{d} boxplot")

outlier(data, 'Age', 'exercise', 'physical illness', 'smoke/drink')

def outlierRemoval(dataframe):
    for i in dataframe.columns:
        lowerQuartile = dataframe[i].describe()[4]
        upperQuartile = dataframe[i].describe()[6]
        IQR = upperQuartile - lowerQuartile
        lowerIQR = lowerQuartile- 1.5 * IQR
        upperIQR = upperQuartile + 1.5 * IQR
        dataframe = dataframe.loc[(dataframe[i] >= lowerIQR) & (dataframe[i] <= upperIQR)]
    return dataframe

cat = data.select_dtypes(include = ['object', 'category'])
num = data.select_dtypes(include = 'number')

display(num.head(3))
display(cat.head(3))

plt.figure(figsize = (6,3))
sns.regplot(x = data.Age, y = data['sleep time'])

from matplotlib.ticker import StrMethodFormatter

screentime = pd.crosstab(index = data['sleep time'], columns = data['screen time'])
print(screentime)
screentime.plot.bar();
plt.gca().xaxis.set_major_formatter(StrMethodFormatter('{x:,.2f}'))

print(data['sleep time'].value_counts())
data.hist(bins=50,figsize=[10,7])
print('Total time : ', data['sleep time'].sum())

#sleep_time = pd.crosstab(index = data['sleep time'], columns = data['physical illness'])
#print(sleep_time)
#corr = sleep_time.corr()
#corr.style.background_gradient(cmap='Blues')

sleep_time = pd.crosstab(index = data['sleep time'], columns = data['Age'])
print(sleep_time)
corr = sleep_time.corr()
corr.style.background_gradient(cmap='BuPu')

cat = data.select_dtypes(include = ['object', 'category'])
num = data.select_dtypes(include = 'number')

display(num.head(3))
display(cat.head(3))